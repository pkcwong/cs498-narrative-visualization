{"version":3,"sources":["Cartesian.jsx","App.js","serviceWorker.js","index.js"],"names":["Cartesian","props","Fragment","id","prevProps","prevState","snapshot","width","this","height","dataset","console","log","document","getElementById","innerHTML","canvas","d3","append","attr","xScale","domain","range","yScale","call","opinion","tally","popularity","Object","keys","forEach","framework","path","lineData","line","curve","x","data","y","datum","React","Component","App","state","screen","updateWindowDimensions","bind","window","addEventListener","fetchData","fetch","getDataUrl","then","response","json","setState","catch","err","error","Promise","all","mapper2016","mapper","map","record","tools","experience","reduce","accumulator","current","statistics","tally2016","tally2017","tally2018","tally2019","innerWidth","innerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2VAGaA,EAAb,kDAEC,WAAYC,GAAQ,uCACbA,GAHR,qDAOE,OACC,kBAAC,IAAMC,SAAP,KACC,yBAAKC,GAAG,iBATZ,yCAcoBC,EAAWC,EAAWC,GACxC,IAAMC,EAAQC,KAAKP,MAAL,MACRQ,EAASD,KAAKP,MAAL,OACTS,EAAUF,KAAKP,MAAL,QAChBU,QAAQC,IAAIF,GACZG,SAASC,eAAe,aAAaC,UAAY,GACjD,IAAMC,EAASC,IAAU,cAAcC,OAAO,OAC9CF,EAAOG,KAAK,QAASZ,GACrBS,EAAOG,KAAK,SAAUV,GAEtB,IAAMW,EAASH,MAAiBI,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,EAAGf,IACnDgB,EAASN,MAAiBI,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,EAAGb,IAEzDO,EAAOE,OAAO,KAAKC,KAAK,YAAY,eAAwBV,EAAS,EAAI,KAAKe,KAAKP,IAAcG,IACjGJ,EAAOE,OAAO,KAAKC,KAAK,YAAY,aAAeZ,EAAQ,EAAK,OAAaiB,KAAKP,IAAYM,IAE9F,IAAME,EAAU,SAACC,GAAD,OAAWA,EAAK,WAAiBA,EAAK,cAAoBA,EAAK,YACzEC,EAAa,SAACD,GAAD,OAAYA,EAAK,cAAoBA,EAAK,YAAkBA,EAAK,YAAkBA,EAAK,WAAiBA,EAAK,eAAqBA,EAAK,cAAoBA,EAAK,YAEpLE,OAAOC,KAAKnB,GAASoB,SAAQ,SAACC,GAC7B,IAAMC,EAAOhB,EAAOE,OAAO,KAAKA,OAAO,QACjCe,EAAW,CAChB,CACCR,EAAQf,EAAQqB,GAAR,WACRJ,EAAWjB,EAAQqB,GAAR,YAEZ,CACCN,EAAQf,EAAQqB,GAAR,WACRJ,EAAWjB,EAAQqB,GAAR,YAEZ,CACCN,EAAQf,EAAQqB,GAAR,WACRJ,EAAWjB,EAAQqB,GAAR,YAEZ,CACCN,EAAQf,EAAQqB,GAAR,WACRJ,EAAWjB,EAAQqB,GAAR,aAGPG,EAAOjB,MAAUkB,MAAMlB,KAC7BiB,EAAKE,GAAE,SAAAC,GAAI,OAAIjB,EAAOiB,EAAK,OAC3BH,EAAKI,GAAE,SAAAD,GAAI,OAAId,EAAOc,EAAK,OAC3BL,EAAKO,MAAMN,GAAUd,KAAK,SAAU,QAAQA,KAAK,eAAgB,GAAGA,KAAK,OAAQ,QAAQA,KAAK,IAAKe,UAxDtG,GAA+BM,IAAMC,WC4GtBC,E,kDAxGd,WAAYzC,GAAQ,IAAD,8BAClB,cAAMA,IACD0C,MAAQ,CACZC,OAAQ,CACPrC,MAAO,EACPE,OAAQ,GAET,kDAAmD,GACnD,kDAAmD,GACnD,kDAAmD,GACnD,kDAAmD,GACnDC,QAAS,IAEV,EAAKmC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAbZ,E,qDAiBlB,OACC,kBAAC,IAAM5C,SAAP,KACC,kEAGA,kBAAC,EAAD,CAAWK,MAAO,IAAME,OAAQ,IAAKC,QAASF,KAAKmC,MAAMjC,a,0CAKvC,IAAD,OACnBF,KAAKqC,yBACLE,OAAOC,iBAAiB,SAAUxC,KAAKqC,wBACvC,IACMI,EAAY,SAACvC,GAAD,OAAawC,MADZ,SAACxC,GAAD,MAAa,uFAAyFA,EACpFyC,CAAWzC,IAAU0C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAACE,GACjG,EAAKC,SAAL,eACE7C,EAAU4C,OAEVE,OAAM,SAACC,GACT9C,QAAQ+C,MAAMD,OAEfE,QAAQC,IAAI,CACXX,EAAU,mDACVA,EAAU,mDACVA,EAAU,mDACVA,EAAU,qDACRG,MAAK,WACP,IAAMS,EAAa,CAClB,UAAa,EACb,WAAc,EACd,YAAe,EACf,gBAAmB,EACnB,eAAkB,GAGbnC,EAAQ,SAAChB,EAASoD,GAAV,OAAqB,SAAC/B,GAAD,OAAerB,EAAQqD,KAAI,SAAAC,GAAM,yBAAIA,EAAOC,aAAX,iBAAI,EAAelC,UAAnB,aAAI,EAA2BmC,cAAYC,QAAO,SAACC,EAAaC,GAAd,OAA2BA,EAAO,eACpJD,EADoJ,eAEtJC,EAAUD,EAAYC,GAAW,IAC9BD,IAAcxC,OAAOC,KAAKiC,GAAQK,QAAO,SAACC,EAAaC,GAAd,sBAC1CD,EAD0C,eAE5CC,EAAU,MACR,OAOEC,EAAc,CACnBC,UANiB7C,EAAM,EAAKiB,MAAM,mDAAoDkB,GAOtFW,UANiB9C,EAAM,EAAKiB,MAAM,mDAAoDkB,GAOtFY,UANiB/C,EAAM,EAAKiB,MAAM,mDAAoDkB,GAOtFa,UANiBhD,EAAM,EAAKiB,MAAM,mDAAoDkB,IASjFnD,EAAU,CACf,QACA,QACA,UACA,SACCyD,QAAO,SAACC,EAAarC,GAAd,sBACLqC,EADK,eAEPrC,EAAYH,OAAOC,KAAKyC,GAAYH,QAAO,SAACC,EAAaC,GAAd,sBACxCD,EADwC,eAE1CC,EAAUC,EAAWD,GAAStC,OAC5B,QACD,IAEJ,EAAKwB,SAAS,CACb7C,QAASA,OAER8C,OAAM,SAACC,GACT9C,QAAQ+C,MAAMD,Q,+CAKfjD,KAAK+C,SAAS,CACbX,OAAQ,CACPrC,MAAOwC,OAAO4B,WACdlE,OAAQsC,OAAO6B,mB,GAnGDpC,IAAMC,WCOJoC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtE,SAASC,eAAe,SDyHpB,kBAAmBsE,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAE,GACL/C,QAAQ+C,MAAMA,EAAM+B,c","file":"static/js/main.27308511.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport class Cartesian extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div id=\"cartesian\"/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\r\n\t\tconst width = this.props[\"width\"];\r\n\t\tconst height = this.props[\"height\"];\r\n\t\tconst dataset = this.props[\"dataset\"];\r\n\t\tconsole.log(dataset);\r\n\t\tdocument.getElementById(\"cartesian\").innerHTML = \"\";\r\n\t\tconst canvas = d3.select(\"#cartesian\").append(\"svg\");\r\n\t\tcanvas.attr(\"width\", width);\r\n\t\tcanvas.attr(\"height\", height);\r\n\r\n\t\tconst xScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\r\n\t\tconst yScale = d3.scaleLinear().domain([1, 0]).range([0, height]);\r\n\r\n\t\tcanvas.append(\"g\").attr(\"transform\",\"translate(\"+ 0 + \",\"+ (height / 2) +\")\").call(d3.axisBottom(xScale));\r\n\t\tcanvas.append(\"g\").attr(\"transform\",\"translate(\"+ (width / 2) + \",\"+ 0 +\")\").call(d3.axisLeft(yScale));\r\n\r\n\t\tconst opinion = (tally) => tally[\"would_use\"] / (tally[\"would_not_use\"] + tally[\"would_use\"]);\r\n\t\tconst popularity = (tally) => (tally[\"would_not_use\"] + tally[\"would_use\"]) / (tally[\"never_heard\"] + tally[\"interested\"] + tally[\"not_interested\"] + tally[\"would_not_use\"] + tally[\"would_use\"]);\r\n\r\n\t\tObject.keys(dataset).forEach((framework) => {\r\n\t\t\tconst path = canvas.append(\"g\").append(\"path\");\r\n\t\t\tconst lineData = [\r\n\t\t\t\t[\r\n\t\t\t\t\topinion(dataset[framework][\"tally2016\"]),\r\n\t\t\t\t\tpopularity(dataset[framework][\"tally2016\"])\r\n\t\t\t\t],\r\n\t\t\t\t[\r\n\t\t\t\t\topinion(dataset[framework][\"tally2017\"]),\r\n\t\t\t\t\tpopularity(dataset[framework][\"tally2017\"])\r\n\t\t\t\t],\r\n\t\t\t\t[\r\n\t\t\t\t\topinion(dataset[framework][\"tally2018\"]),\r\n\t\t\t\t\tpopularity(dataset[framework][\"tally2018\"])\r\n\t\t\t\t],\r\n\t\t\t\t[\r\n\t\t\t\t\topinion(dataset[framework][\"tally2019\"]),\r\n\t\t\t\t\tpopularity(dataset[framework][\"tally2019\"])\r\n\t\t\t\t]\r\n\t\t\t];\r\n\t\t\tconst line = d3.line().curve(d3.curveCardinal);\r\n\t\t\tline.x(data => xScale(data[0]));\r\n\t\t\tline.y(data => yScale(data[1]));\r\n\t\t\tpath.datum(lineData).attr(\"stroke\", \"blue\").attr(\"stroke-width\", 2).attr(\"fill\", \"none\").attr(\"d\", line);\r\n\t\t});\r\n\t}\r\n\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Cartesian } from \"./Cartesian\";\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tscreen: {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t},\n\t\t\t\"state_of_js_2016_normalized_responses_anon.json\": [],\n\t\t\t\"state_of_js_2017_normalized_responses_anon.json\": [],\n\t\t\t\"state_of_js_2018_normalized_responses_anon.json\": [],\n\t\t\t\"state_of_js_2019_normalized_responses_anon.json\": [],\n\t\t\tdataset: {}\n\t\t};\n\t\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h2>\n\t\t\t\t\tPopularity of Front End Frameworks\n\t\t\t\t</h2>\n\t\t\t\t<Cartesian width={1000} height={600} dataset={this.state.dataset}/>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.updateWindowDimensions();\n\t\twindow.addEventListener(\"resize\", this.updateWindowDimensions);\n\t\tconst getDataUrl = (dataset) => \"https://raw.githubusercontent.com/pkcwong/cs498-narrative-visualization/master/data/\" + dataset;\n\t\tconst fetchData = (dataset) => fetch(getDataUrl(dataset)).then(response => response.json()).then((json) => {\n\t\t\tthis.setState({\n\t\t\t\t[dataset]: json\n\t\t\t});\n\t\t}).catch((err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t\tPromise.all([\n\t\t\tfetchData(\"state_of_js_2016_normalized_responses_anon.json\"),\n\t\t\tfetchData(\"state_of_js_2017_normalized_responses_anon.json\"),\n\t\t\tfetchData(\"state_of_js_2018_normalized_responses_anon.json\"),\n\t\t\tfetchData(\"state_of_js_2019_normalized_responses_anon.json\")\n\t\t]).then(() => {\n\t\t\tconst mapper2016 = {\n\t\t\t\t\"would_use\": 2,\n\t\t\t\t\"interested\": 1,\n\t\t\t\t\"never_heard\": 0,\n\t\t\t\t\"not_interested\": -1,\n\t\t\t\t\"would_not_use\": -2\n\t\t\t};\n\n\t\t\tconst tally = (dataset, mapper) => (framework) => dataset.map(record => record.tools?.[framework]?.experience).reduce((accumulator, current) => (current ? ({\n\t\t\t\t...accumulator,\n\t\t\t\t[current]: accumulator[current] + 1\n\t\t\t}) : accumulator), Object.keys(mapper).reduce((accumulator, current) => ({\n\t\t\t\t...accumulator,\n\t\t\t\t[current]: 0\n\t\t\t}), {}));\n\n\t\t\tconst tally2016 = tally(this.state[\"state_of_js_2016_normalized_responses_anon.json\"], mapper2016);\n\t\t\tconst tally2017 = tally(this.state[\"state_of_js_2017_normalized_responses_anon.json\"], mapper2016);\n\t\t\tconst tally2018 = tally(this.state[\"state_of_js_2018_normalized_responses_anon.json\"], mapper2016);\n\t\t\tconst tally2019 = tally(this.state[\"state_of_js_2019_normalized_responses_anon.json\"], mapper2016);\n\n\t\t\tconst statistics = ({\n\t\t\t\ttally2016,\n\t\t\t\ttally2017,\n\t\t\t\ttally2018,\n\t\t\t\ttally2019\n\t\t\t});\n\n\t\t\tconst dataset = [\n\t\t\t\t\"react\",\n\t\t\t\t\"vuejs\",\n\t\t\t\t\"angular\",\n\t\t\t\t\"ember\"\n\t\t\t].reduce((accumulator, framework) => ({\n\t\t\t\t...accumulator,\n\t\t\t\t[framework]: Object.keys(statistics).reduce((accumulator, current) => ({\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[current]: statistics[current](framework)\n\t\t\t\t}), {})\n\t\t\t}), {});\n\n\t\t\tthis.setState({\n\t\t\t\tdataset: dataset\n\t\t\t});\n\t\t}).catch((err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\tupdateWindowDimensions() {\n\t\tthis.setState({\n\t\t\tscreen: {\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}